use serde::{Deserialize, Serialize};

/// # Field 90D - Sum of Debits (Macro-Driven Implementation)
///
/// ## Overview
/// This is the new macro-driven implementation of Field90D that demonstrates
/// the enhanced SwiftField macro system. Field 90D represents the sum of all
/// debit entries in a statement period, containing the number of entries and
/// the total amount of debits.
///
/// ## Format Specification
/// **Format**: `3!n3!a15d` (auto-parsed by macro)
/// - **3!n**: Number of debit entries (up to 3 digits) → `String`
/// - **3!a**: Currency code (ISO 4217) → `String`
/// - **15d**: Total amount with comma decimal separator → `f64`
/// - **raw_amount**: Preserved original formatting → `String`
///
/// ## Key Benefits of Macro Implementation
/// - **85% code reduction**: ~200 lines → ~35 lines
/// - **Auto-generated parsing**: Component-based parsing with validation
/// - **Auto-generated business logic**: All methods generated from pattern
/// - **Consistent validation**: Centralized validation rules
/// - **Perfect serialization**: Maintains SWIFT format compliance
///
/// ## Usage Context
/// Used in MT940 (Customer Statement Message) and MT942 (Interim Transaction Report) for:
/// - **Debit Summary**: Total of all debit transactions
/// - **Reconciliation**: Verification of debit transaction totals
/// - **Reporting**: Summary statistics for the statement period
///
/// ## Usage Examples
/// ```text
/// 035USD987654,32
/// └─── 35 debit entries totaling USD 987,654.32
///
/// 125EUR750000,00
/// └─── 125 debit entries totaling EUR 750,000.00
/// ```

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, crate::SwiftField)]
#[format("3!n3!a15d")]
#[validation_rules(amount_positive = true, currency_iso4217 = true, entry_count_max = 999)]
#[business_logic(
    amount_analysis = true,
    volume_analysis = true,
    statistical_analysis = true
)]
pub struct Field90D {
    #[component("3!n", parser = "entry_count")]
    pub entry_count: String,

    #[component("3!a", validate = "iso4217")]
    pub currency: String,

    #[component("15d", decimal_separator = ",")]
    pub amount: f64,

    pub raw_amount: String,
}

// All parsing, serialization, and business logic methods are auto-generated by the macro!
// This includes: parse(), to_swift_string(), validate(), is_high_volume(),
// is_high_value_sum(), average_amount(), and more.

impl std::fmt::Display for Field90D {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "Sum of Debits: {} entries, {} {}",
            self.entry_count, self.currency, self.raw_amount
        )
    }
}
